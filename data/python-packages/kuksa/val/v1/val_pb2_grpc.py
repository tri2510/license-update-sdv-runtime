# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from kuksa.val.v1 import val_pb2 as kuksa_dot_val_dot_v1_dot_val__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kuksa/val/v1/val_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class VALStub(object):
    """Note on authorization:
    Tokens (auth-token or auth-uuid) are sent as (GRPC / http2) metadata.

    The auth-token is a JWT compliant token as the examples found here:
    https://github.com/eclipse-kuksa/kuksa-databrokertree/master/certificates/jwt

    See also https://github.com/eclipse-kuksa/kuksa-databrokerblob/master/doc/jwt.md

    Upon reception of auth-token, server shall generate an auth-uuid in metadata
    that the client can use instead of auth-token in subsequent calls.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/kuksa.val.v1.VAL/Get',
                request_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetRequest.SerializeToString,
                response_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Set = channel.unary_unary(
                '/kuksa.val.v1.VAL/Set',
                request_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.SetRequest.SerializeToString,
                response_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.SetResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/kuksa.val.v1.VAL/Subscribe',
                request_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeResponse.FromString,
                _registered_method=True)
        self.GetServerInfo = channel.unary_unary(
                '/kuksa.val.v1.VAL/GetServerInfo',
                request_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoRequest.SerializeToString,
                response_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoResponse.FromString,
                _registered_method=True)


class VALServicer(object):
    """Note on authorization:
    Tokens (auth-token or auth-uuid) are sent as (GRPC / http2) metadata.

    The auth-token is a JWT compliant token as the examples found here:
    https://github.com/eclipse-kuksa/kuksa-databrokertree/master/certificates/jwt

    See also https://github.com/eclipse-kuksa/kuksa-databrokerblob/master/doc/jwt.md

    Upon reception of auth-token, server shall generate an auth-uuid in metadata
    that the client can use instead of auth-token in subsequent calls.

    """

    def Get(self, request, context):
        """Get entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
        """Set entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe to a set of entries

        Returns a stream of notifications.

        InvalidArgument is returned if the request is malformed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerInfo(self, request, context):
        """Shall return information that allows the client to determine
        what server/server implementation/version it is talking to
        eg. kuksa-databroker 0.5.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VALServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetRequest.FromString,
                    response_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetResponse.SerializeToString,
            ),
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.SetRequest.FromString,
                    response_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.SetResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeRequest.FromString,
                    response_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeResponse.SerializeToString,
            ),
            'GetServerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerInfo,
                    request_deserializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoRequest.FromString,
                    response_serializer=kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kuksa.val.v1.VAL', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VAL(object):
    """Note on authorization:
    Tokens (auth-token or auth-uuid) are sent as (GRPC / http2) metadata.

    The auth-token is a JWT compliant token as the examples found here:
    https://github.com/eclipse-kuksa/kuksa-databrokertree/master/certificates/jwt

    See also https://github.com/eclipse-kuksa/kuksa-databrokerblob/master/doc/jwt.md

    Upon reception of auth-token, server shall generate an auth-uuid in metadata
    that the client can use instead of auth-token in subsequent calls.

    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kuksa.val.v1.VAL/Get',
            kuksa_dot_val_dot_v1_dot_val__pb2.GetRequest.SerializeToString,
            kuksa_dot_val_dot_v1_dot_val__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kuksa.val.v1.VAL/Set',
            kuksa_dot_val_dot_v1_dot_val__pb2.SetRequest.SerializeToString,
            kuksa_dot_val_dot_v1_dot_val__pb2.SetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kuksa.val.v1.VAL/Subscribe',
            kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeRequest.SerializeToString,
            kuksa_dot_val_dot_v1_dot_val__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kuksa.val.v1.VAL/GetServerInfo',
            kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoRequest.SerializeToString,
            kuksa_dot_val_dot_v1_dot_val__pb2.GetServerInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
