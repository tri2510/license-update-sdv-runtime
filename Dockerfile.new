# This is for SDV-Runtime running with VSS 4.0

# Different targets need different base images, so prepare aliases here

# AMD is a statically linked MUSL build
FROM ubuntu:22.04 AS target-amd64
ENV BUILDTARGET="x86_64-unknown-linux-musl"
COPY --chmod=0755 bin/amd64/databroker-amd64 /app/databroker
COPY --chmod=0755 bin/amd64/node-km-x64 /home/dev/ws/kit-manager/node-km

RUN groupadd -r sdvr && useradd -r -g sdvr dev \
    && chown -R dev:sdvr /app/databroker \
    && chown -R dev:sdvr /home/dev/ && chmod -R u+w /home/dev/ \
    && apt-get update \
    && apt-get install -y --no-install-recommends python3 mosquitto \
    ca-certificates python-is-python3 python3-pip nano git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ARM64 is a statically linked GRPC build
FROM ubuntu:22.04 AS target-arm64
ENV BUILDTARGET="aarch64-unknown-linux-musl"
COPY --chmod=0755 bin/arm64/databroker-arm64 /app/databroker
COPY --chmod=0755 bin/arm64/node-km-arm64 /home/dev/ws/kit-manager/node-km

RUN groupadd -r sdvr && useradd -r -g sdvr dev \
    && chown -R dev:sdvr /app/databroker \
    && chown -R dev:sdvr /home/dev/ && chmod -R u+w /home/dev/ \
    && apt-get update \
    && apt-get install -y --no-install-recommends python3 mosquitto \
    ca-certificates python-is-python3 python3-pip nano git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 

# Python builder stage to create the package environment
FROM ubuntu:22.04 AS python-builder
ARG TARGETARCH

# Install Python and pip
RUN apt-get update && apt-get install -y \
    python3 python3-pip git build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy requirements file
COPY requirements-docker.txt .

# Create target directory for packages
RUN mkdir -p /home/dev/python-packages

# Install all Python packages to the target directory
ENV PYTHONPATH="/home/dev/python-packages:${PYTHONPATH}"
RUN pip3 install --no-cache-dir --target /home/dev/python-packages -r requirements-docker.txt

# Clone and setup vehicle_signal_specification
RUN git clone --recurse-submodules --depth 1 --branch v4.0 https://github.com/COVESA/vehicle_signal_specification.git \
    && cd vehicle_signal_specification/ \
    && rm -rf .git \
    && cd vss-tools/ \
    && python3 -m vss_tools.vspec2json -I ../spec -u ../spec/units.yaml ../spec/VehicleSignalSpecification.vspec vss.json

# Clone and setup vehicle-model-generator
RUN git clone --depth 1 --branch v0.7.2 https://github.com/eclipse-velocitas/vehicle-model-generator.git \
    && cd vehicle-model-generator/ \
    && cp -r src/velocitas/ /home/dev/python-packages/velocitas/ \
    && python3 -m velocitas.model_generator.cli /build/vehicle_signal_specification/vss-tools/vss.json \
        -I /build/vehicle_signal_specification/spec \
        -u /build/vehicle_signal_specification/spec/units.yaml \
    && mv ./gen_model/vehicle /home/dev/python-packages/

# Copy VSS and vehicle_signal_specification to the target
RUN cp -r vehicle_signal_specification /home/dev/python-packages/ \
    && cp vehicle_signal_specification/vss-tools/vss.json /home/dev/python-packages/

# Now adding generic parts
FROM target-$TARGETARCH AS target
ARG TARGETARCH

# Copy Python packages from builder stage
COPY --from=python-builder --chown=dev:sdvr /home/dev/python-packages /home/dev/python-packages

# Copy other necessary files
COPY --chown=dev:sdvr --chmod=0755 data/vss-core/vss.json /home/dev/ws/vss.json
COPY --chown=dev:sdvr --chmod=0755 data/vss-core/default_vss.json /home/dev/ws/default_vss.json
COPY --chown=dev:sdvr --chmod=0755 kuksa-syncer /home/dev/ws/kuksa-syncer/
COPY --chown=dev:sdvr --chmod=0755 mock /home/dev/ws/mock/
COPY mosquitto-no-auth.conf /etc/mosquitto/mosquitto-no-auth.conf
COPY --chown=dev:sdvr --chmod=0755 start_services.sh /start_services.sh

ENV PYTHONPATH="/home/dev/python-packages/:${PYTHONPATH}"

# Re-install grpcio to ensure it's built for the target platform
RUN pip3 uninstall -y grpcio && pip3 install grpcio==1.64.1
RUN pip3 install requests

# Create symlinks and move files as in original
RUN ln -s /home/dev/python-packages/velocitas_sdk /home/dev/python-packages/sdv \
    && mv /home/dev/ws/kuksa-syncer/vehicle_model_manager.py /home/dev/ws/kuksa-syncer/pkg_manager.py /home/dev/python-packages/

# Copy Kit-Manager files
COPY --chown=dev:sdvr Kit-Manager/package*.json /home/dev/ws/kit-manager/
COPY --chown=dev:sdvr Kit-Manager/configs.js /home/dev/ws/kit-manager/
COPY --chown=dev:sdvr Kit-Manager/src /home/dev/ws/kit-manager/src

# Set user and environment
USER dev

ENV KUKSA_DATABROKER_ADDR=127.0.0.1
ENV KUKSA_DATABROKER_PORT=55555
ENV KUKSA_DATABROKER_METADATA_FILE=/home/dev/ws/vss.json
EXPOSE $KUKSA_DATABROKER_PORT 1883

WORKDIR /home/dev/

ENTRYPOINT ["/start_services.sh"]